def Properties localProps = getSigningProperties()

apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    signingConfigs {
        release {
            storeFile file(localProps.getProperty('RELEASE_KEYSTORE_PATH','fillhere'))
            storePassword localProps.getProperty('RELEASE_KEYSTORE_PW','')
            keyAlias localProps.getProperty('RELEASE_KEY_ALIAS','')
            keyPassword localProps.getProperty('RELEASE_KEY_PW','')
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        renderscriptTargetApi 20
        renderscriptSupportModeEnabled  true

        buildConfigField "String", "GIT_REV", "\"" + getGitRev() + "\""
        buildConfigField "String", "GIT_BRANCH", "\"" + getGitBranch() + "\""
        buildConfigField "String", "GIT_DATE", "\"" + getGitCommitDate() + "\""
        buildConfigField "String", "BUILD_NUMBER", "\"" + getCiBuildNumber() + "\""
        buildConfigField "String", "BUILD_DATE", "\"" + getBuildTime() + "\""
        buildConfigField "boolean", "IS_CI_BUILD", "${isCiBuild()}"
//        ndk {
//            moduleName "libblur"
//            cFlags "-fvisibility=hidden -W -Wall -ffast-math -O3 -funroll-loops"
//            ldLibs "log", "jnigraphics"
//        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt");
            proguardFiles 'proguard-rules.txt'
            //jniDebuggable true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt");
            proguardFiles 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        abortOnError false
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    output.outputFile.name.replace(".apk", "-${variant.versionName}.apk"))
        }
    }
}

dependencies {
    compile "com.android.support:support-v4:25.1.0"
    compile 'com.android.support:support-annotations:25.1.0'
    compile "com.android.support:support-v13:25.1.0"
    compile "com.android.support:appcompat-v7:25.1.0"
    compile 'com.android.support:cardview-v7:25.1.0'
    compile 'com.android.support:recyclerview-v7:25.1.0'
    compile 'com.android.support:design:25.1.0'

    compile 'com.squareup.picasso:picasso:2.5.2'

    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.6'
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.6'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.6'

    compile('at.favre.lib.hood:hood-extended:0.4.1')

    compile project(':tablefixedheader')
//    compile project(':paralloid')
//    compile project(':ne10blur')
    compile fileTree(dir: 'libs', include: ['*.jar'])
}




